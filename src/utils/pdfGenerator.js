// src/utils/pdfGenerator.js
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

export const pdfGenerator = {
  // Generate PDF from HTML content
  generateFromHTML: async (htmlContent, options = {}) => {
    const {
      filename = "document.pdf",
      pageFormat = "a4",
      orientation = "portrait",
      margin = 20,
      quality = 1.0,
      includeMetadata = true,
    } = options;

    try {
      // Create temporary container
      const container = document.createElement("div");
      container.style.position = "absolute";
      container.style.left = "-9999px";
      container.style.top = "0";
      container.style.width = "210mm"; // A4 width
      container.style.padding = `${margin}mm`;
      container.style.fontFamily = "Arial, sans-serif";
      container.style.fontSize = "12px";
      container.style.lineHeight = "1.6";
      container.style.color = "#000";
      container.style.backgroundColor = "#fff";
      container.innerHTML = htmlContent;

      document.body.appendChild(container);

      // Generate canvas from HTML
      const canvas = await html2canvas(container, {
        scale: quality,
        useCORS: true,
        allowTaint: true,
        backgroundColor: "#ffffff",
      });

      document.body.removeChild(container);

      // Create PDF
      const pdf = new jsPDF(orientation, "mm", pageFormat);
      const imgWidth = pdf.internal.pageSize.getWidth() - margin * 2;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      const pageHeight = pdf.internal.pageSize.getHeight() - margin * 2;

      let heightLeft = imgHeight;
      let position = margin;

      // Add first page
      pdf.addImage(
        canvas.toDataURL("image/png"),
        "PNG",
        margin,
        position,
        imgWidth,
        imgHeight
      );

      heightLeft -= pageHeight;

      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight + margin;
        pdf.addPage();
        pdf.addImage(
          canvas.toDataURL("image/png"),
          "PNG",
          margin,
          position,
          imgWidth,
          imgHeight
        );
        heightLeft -= pageHeight;
      }

      // Add metadata
      if (includeMetadata) {
        pdf.setProperties({
          title: filename.replace(".pdf", ""),
          subject: "Generated from Protextify",
          author: "Protextify Platform",
          creator: "Protextify PDF Generator",
          producer: "jsPDF",
        });
      }

      return pdf;
    } catch (error) {
      throw new Error(`PDF generation failed: ${error.message}`);
    }
  },

  // Generate PDF from submission content
  generateSubmissionPDF: async (submission, options = {}) => {
    const {
      includeHeader = true,
      includeFooter = true,
      includeMetadata = true,
      watermark = null,
    } = options;

    try {
      // Format submission content
      const htmlContent = `
        ${
          includeHeader
            ? `
          <div style="text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #23407a;">
            <h1 style="color: #23407a; margin: 0; font-size: 24px;">${
              submission.assignment?.title || "Submission"
            }</h1>
            <p style="margin: 10px 0; color: #666;">
              Oleh: ${submission.student?.fullName || "Unknown Student"}<br>
              Kelas: ${
                submission.assignment?.class?.name || "Unknown Class"
              }<br>
              Tanggal: ${new Date(
                submission.submittedAt || submission.updatedAt
              ).toLocaleDateString("id-ID")}
            </p>
          </div>
        `
            : ""
        }
        
        <div style="margin-bottom: 30px;">
          ${submission.content || "No content available"}
        </div>

        ${
          includeFooter
            ? `
          <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 10px; color: #888;">
            <p>Generated by Protextify Platform on ${new Date().toLocaleString(
              "id-ID"
            )}</p>
            ${
              submission.plagiarismScore
                ? `<p>Plagiarism Score: ${submission.plagiarismScore}%</p>`
                : ""
            }
            ${submission.grade ? `<p>Grade: ${submission.grade}</p>` : ""}
          </div>
        `
            : ""
        }
      `;

      const filename = `${submission.student?.fullName || "submission"}_${
        submission.assignment?.title || "assignment"
      }.pdf`;

      const pdf = await pdfGenerator.generateFromHTML(htmlContent, {
        filename,
        includeMetadata,
        ...options,
      });

      // Add watermark if specified
      if (watermark) {
        pdfGenerator.addWatermark(pdf, watermark);
      }

      return pdf;
    } catch (error) {
      throw new Error(`Submission PDF generation failed: ${error.message}`);
    }
  },

  // Generate bulk PDF for multiple submissions
  generateBulkSubmissionPDF: async (
    submissions,
    assignmentTitle,
    options = {}
  ) => {
    const { separatePages = true, includeTableOfContents = true } = options;

    try {
      const pdf = new jsPDF("portrait", "mm", "a4");
      let isFirstPage = true;

      // Add title page
      pdf.setFontSize(24);
      pdf.setTextColor(35, 64, 122); // #23407a
      pdf.text(assignmentTitle || "Bulk Submissions", 105, 50, {
        align: "center",
      });

      pdf.setFontSize(14);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`${submissions.length} Submissions`, 105, 70, {
        align: "center",
      });
      pdf.text(
        `Generated on ${new Date().toLocaleDateString("id-ID")}`,
        105,
        80,
        { align: "center" }
      );

      // Add table of contents
      if (includeTableOfContents) {
        pdf.addPage();
        pdf.setFontSize(18);
        pdf.text("Table of Contents", 20, 30);

        let yPosition = 50;
        submissions.forEach((submission, index) => {
          pdf.setFontSize(12);
          pdf.text(
            `${index + 1}. ${
              submission.student?.fullName || "Unknown Student"
            }`,
            20,
            yPosition
          );
          yPosition += 10;

          if (yPosition > 270) {
            pdf.addPage();
            yPosition = 30;
          }
        });
      }

      // Add submissions
      for (let i = 0; i < submissions.length; i++) {
        const submission = submissions[i];

        if (separatePages) {
          pdf.addPage();
        }

        // Generate submission PDF and merge
        const submissionPdf = await pdfGenerator.generateSubmissionPDF(
          submission,
          {
            includeHeader: true,
            includeFooter: true,
            includeMetadata: false,
          }
        );

        // Merge logic would go here (requires additional library like pdf-merger)
        // For now, we'll add a placeholder page
        pdf.setFontSize(16);
        pdf.text(
          `Submission ${i + 1}: ${submission.student?.fullName}`,
          20,
          30
        );

        // Add submission content (simplified)
        pdf.setFontSize(12);
        const lines = pdf.splitTextToSize(
          submission.content || "No content",
          170
        );
        pdf.text(lines, 20, 50);
      }

      return pdf;
    } catch (error) {
      throw new Error(`Bulk PDF generation failed: ${error.message}`);
    }
  },

  // Add watermark to PDF
  addWatermark: (pdf, watermarkText) => {
    const pageCount = pdf.getNumberOfPages();

    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setGState(new pdf.GState({ opacity: 0.1 }));
      pdf.setTextColor(128, 128, 128);
      pdf.setFontSize(50);

      // Calculate center position
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      pdf.text(watermarkText, pageWidth / 2, pageHeight / 2, {
        align: "center",
        angle: 45,
      });

      // Reset state
      pdf.setGState(new pdf.GState({ opacity: 1 }));
      pdf.setTextColor(0, 0, 0);
    }
  },

  // Download PDF
  downloadPDF: (pdf, filename) => {
    pdf.save(filename);
  },

  // Get PDF as blob
  getPDFBlob: (pdf) => {
    return pdf.output("blob");
  },

  // Get PDF as base64
  getPDFBase64: (pdf) => {
    return pdf.output("datauristring");
  },
};

export default pdfGenerator;
